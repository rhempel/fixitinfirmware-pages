<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fix It In Firmware (Posts about opportunity)</title><link>https://fixitinfirmware.com/</link><description></description><atom:link href="https://fixitinfirmware.com/categories/opportunity.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:rhempel@fixitinfirmware.com"&gt;Ralph Hempel&lt;/a&gt; </copyright><lastBuildDate>Sun, 28 Nov 2021 11:18:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Mission Statements</title><link>https://fixitinfirmware.com/posts/mission-statements/</link><dc:creator>Ralph Hempel</dc:creator><description>&lt;img alt="https://history.nasa.gov/SP-4223/p118.jpg" class="align-right" src="https://fixitinfirmware.com/images/accent/GeneKranzAtConsole.thumbnail.jpg"&gt;
&lt;p&gt;Misson statements. Hands up for anyone who loves their company
mission statement.&lt;/p&gt;
&lt;p&gt;Hands up for anyone who &lt;em&gt;knows&lt;/em&gt; their company mission statement.&lt;/p&gt;
&lt;p&gt;In many organizations, the mission statement is laid out by top level
leadership, sometimes with input from departments or individuals. It tends
to be a general and somewhat fluffy set of words that could apply to
just about any organization. And that makes most mission statements
forgettable.&lt;/p&gt;
&lt;p&gt;But that doesn't mean your maintenance team should not have a mission
statement! Your job together with your team is to come up with a
statement that reflects how you want to be seen and heard within
the organization moving forward.&lt;/p&gt;
&lt;p&gt;One step towards improving your team's visibility is to have a 30-60 minute
workshop to identify your key responsibilities and accountabilities. Don't
work on your misison statement yet - just keep that list up on a
whiteboard and make sure that it accurately reflects the team's
purpose. As you do your work, feel free to update the whiteboard by
adding, consolidating, or removing items. Within 2-4 weeks the lists will
be boiled down to a few items that will represent your team's "reason
for being" - that's the core of your mission.&lt;/p&gt;
&lt;p&gt;Maintenance engineering can be extremely demanding because
your work impacts not only future production but also every unit that
has ever been produced and sold. You could be working on tasks
as varied as reducing manufacturing cost, adding a new feature, or
making a fix that can be applied in the field. In rare cases your team
will have to make a call to stop production or even recall a product.&lt;/p&gt;
&lt;p&gt;How do those high level tasks fit into your company's mission statement?
They probably don't - and that's why you and the team need to have one
that feels authentic and relevant for you, while still supporting the
overall company mission.&lt;/p&gt;
&lt;p&gt;Mission statements that are authentic are very hard to come by, so why
not take inspiration from an existing statement and modify it (if needed)
to be relevant for your team?&lt;/p&gt;
&lt;p&gt;Two of my personal favorites are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;Hands up for anyone who &lt;em&gt;knows&lt;/em&gt; their company mission statement.&lt;/p&gt;
&lt;p&gt;In many organizations, the mission statement is laid out by top level
leadership, sometimes with input from departments or individuals. It tends
to be a general and somewhat fluffy set of words that could apply to
just about any organization. And that makes most mission statements
forgettable.&lt;/p&gt;
&lt;p&gt;But that doesn't mean your maintenance team should not have a mission
statement! Your job together with your team is to come up with a
statement that reflects how you want to be seen and heard within
the organization moving forward.&lt;/p&gt;
&lt;p&gt;One step towards improving your team's visibility is to have a 30-60 minute
workshop to identify your key responsibilities and accountabilities. Don't
work on your misison statement yet - just keep that list up on a
whiteboard and make sure that it accurately reflects the team's
purpose. As you do your work, feel free to update the whiteboard by
adding, consolidating, or removing items. Within 2-4 weeks the lists will
be boiled down to a few items that will represent your team's "reason
for being" - that's the core of your mission.&lt;/p&gt;
&lt;p&gt;Maintenance engineering can be extremely demanding because
your work impacts not only future production but also every unit that
has ever been produced and sold. You could be working on tasks
as varied as reducing manufacturing cost, adding a new feature, or
making a fix that can be applied in the field. In rare cases your team
will have to make a call to stop production or even recall a product.&lt;/p&gt;
&lt;p&gt;How do those high level tasks fit into your company's mission statement?
They probably don't - and that's why you and the team need to have one
that feels authentic and relevant for you, while still supporting the
overall company mission.&lt;/p&gt;
&lt;p&gt;Mission statements that are authentic are very hard to come by, so why
not take inspiration from an existing statement and modify it (if needed)
to be relevant for your team?&lt;/p&gt;
&lt;p&gt;Two of my personal favorites are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;In many organizations, the mission statement is laid out by top level
leadership, sometimes with input from departments or individuals. It tends
to be a general and somewhat fluffy set of words that could apply to
just about any organization. And that makes most mission statements
forgettable.&lt;/p&gt;
&lt;p&gt;But that doesn't mean your maintenance team should not have a mission
statement! Your job together with your team is to come up with a
statement that reflects how you want to be seen and heard within
the organization moving forward.&lt;/p&gt;
&lt;p&gt;One step towards improving your team's visibility is to have a 30-60 minute
workshop to identify your key responsibilities and accountabilities. Don't
work on your misison statement yet - just keep that list up on a
whiteboard and make sure that it accurately reflects the team's
purpose. As you do your work, feel free to update the whiteboard by
adding, consolidating, or removing items. Within 2-4 weeks the lists will
be boiled down to a few items that will represent your team's "reason
for being" - that's the core of your mission.&lt;/p&gt;
&lt;p&gt;Maintenance engineering can be extremely demanding because
your work impacts not only future production but also every unit that
has ever been produced and sold. You could be working on tasks
as varied as reducing manufacturing cost, adding a new feature, or
making a fix that can be applied in the field. In rare cases your team
will have to make a call to stop production or even recall a product.&lt;/p&gt;
&lt;p&gt;How do those high level tasks fit into your company's mission statement?
They probably don't - and that's why you and the team need to have one
that feels authentic and relevant for you, while still supporting the
overall company mission.&lt;/p&gt;
&lt;p&gt;Mission statements that are authentic are very hard to come by, so why
not take inspiration from an existing statement and modify it (if needed)
to be relevant for your team?&lt;/p&gt;
&lt;p&gt;Two of my personal favorites are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;But that doesn't mean your maintenance team should not have a mission
statement! Your job together with your team is to come up with a
statement that reflects how you want to be seen and heard within
the organization moving forward.&lt;/p&gt;
&lt;p&gt;One step towards improving your team's visibility is to have a 30-60 minute
workshop to identify your key responsibilities and accountabilities. Don't
work on your misison statement yet - just keep that list up on a
whiteboard and make sure that it accurately reflects the team's
purpose. As you do your work, feel free to update the whiteboard by
adding, consolidating, or removing items. Within 2-4 weeks the lists will
be boiled down to a few items that will represent your team's "reason
for being" - that's the core of your mission.&lt;/p&gt;
&lt;p&gt;Maintenance engineering can be extremely demanding because
your work impacts not only future production but also every unit that
has ever been produced and sold. You could be working on tasks
as varied as reducing manufacturing cost, adding a new feature, or
making a fix that can be applied in the field. In rare cases your team
will have to make a call to stop production or even recall a product.&lt;/p&gt;
&lt;p&gt;How do those high level tasks fit into your company's mission statement?
They probably don't - and that's why you and the team need to have one
that feels authentic and relevant for you, while still supporting the
overall company mission.&lt;/p&gt;
&lt;p&gt;Mission statements that are authentic are very hard to come by, so why
not take inspiration from an existing statement and modify it (if needed)
to be relevant for your team?&lt;/p&gt;
&lt;p&gt;Two of my personal favorites are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;One step towards improving your team's visibility is to have a 30-60 minute
workshop to identify your key responsibilities and accountabilities. Don't
work on your misison statement yet - just keep that list up on a
whiteboard and make sure that it accurately reflects the team's
purpose. As you do your work, feel free to update the whiteboard by
adding, consolidating, or removing items. Within 2-4 weeks the lists will
be boiled down to a few items that will represent your team's "reason
for being" - that's the core of your mission.&lt;/p&gt;
&lt;p&gt;Maintenance engineering can be extremely demanding because
your work impacts not only future production but also every unit that
has ever been produced and sold. You could be working on tasks
as varied as reducing manufacturing cost, adding a new feature, or
making a fix that can be applied in the field. In rare cases your team
will have to make a call to stop production or even recall a product.&lt;/p&gt;
&lt;p&gt;How do those high level tasks fit into your company's mission statement?
They probably don't - and that's why you and the team need to have one
that feels authentic and relevant for you, while still supporting the
overall company mission.&lt;/p&gt;
&lt;p&gt;Mission statements that are authentic are very hard to come by, so why
not take inspiration from an existing statement and modify it (if needed)
to be relevant for your team?&lt;/p&gt;
&lt;p&gt;Two of my personal favorites are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;Maintenance engineering can be extremely demanding because
your work impacts not only future production but also every unit that
has ever been produced and sold. You could be working on tasks
as varied as reducing manufacturing cost, adding a new feature, or
making a fix that can be applied in the field. In rare cases your team
will have to make a call to stop production or even recall a product.&lt;/p&gt;
&lt;p&gt;How do those high level tasks fit into your company's mission statement?
They probably don't - and that's why you and the team need to have one
that feels authentic and relevant for you, while still supporting the
overall company mission.&lt;/p&gt;
&lt;p&gt;Mission statements that are authentic are very hard to come by, so why
not take inspiration from an existing statement and modify it (if needed)
to be relevant for your team?&lt;/p&gt;
&lt;p&gt;Two of my personal favorites are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;How do those high level tasks fit into your company's mission statement?
They probably don't - and that's why you and the team need to have one
that feels authentic and relevant for you, while still supporting the
overall company mission.&lt;/p&gt;
&lt;p&gt;Mission statements that are authentic are very hard to come by, so why
not take inspiration from an existing statement and modify it (if needed)
to be relevant for your team?&lt;/p&gt;
&lt;p&gt;Two of my personal favorites are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;Mission statements that are authentic are very hard to come by, so why
not take inspiration from an existing statement and modify it (if needed)
to be relevant for your team?&lt;/p&gt;
&lt;p&gt;Two of my personal favorites are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;Two of my personal favorites are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;"Tough and competent"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Failure is not an option"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="attribution"&gt;—Gene Kranz (Apollo Flight Director)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;Almost every engineer has at one time or another watched Apollo 13 and
has reflected on their personal work. If you haven't watched it recently,
please make some time to do so, or look up any documentary on the
Apollo program. Maybe bring it up in your next team meeting and ask
for input on an engineering heavy documentary that you can all watch.&lt;/p&gt;
&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;Then spend 30 minutes or so on a team reflection to gather input on
what is the most relevant thing the team can do in the next 2-4 weeks
that makes them feel proud of what they are doing.&lt;/p&gt;
&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;section id="but-we-did-fail-now-what"&gt;
&lt;h2&gt;... but we DID fail - now what?&lt;/h2&gt;
&lt;p&gt;I just said that &lt;em&gt;Failure is not an option&lt;/em&gt; is one of my guiding star
statements. At LEGO we have a similar one - &lt;em&gt;Only the best is good enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As much as I admire these statements, they come with a downside. They
may set up the organization to believe that failures will not happen, or
support a culture of not releasing a product until it's perfect and
complete.&lt;/p&gt;
&lt;p&gt;Of course these are relevant statements for space flight, where cost and
quality are in step with each other. In consumer and commercial goods,
you &lt;em&gt;will&lt;/em&gt; have failures in design, production, software, and process - and
they will almost always be coupled with schedule and cost pressure or
incorrect assumptions.&lt;/p&gt;
&lt;p&gt;Your job as part of the maintenance team is to be prepared to address
these failures, and to do so professionally. That means making sure that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You value facts over guessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You fix the root cause and not the symptom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You communicate clearly in a timely fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;em&gt;Tough and Competent&lt;/em&gt; comes in. You and the team need to
be competent in gathering facts and getting to root cause. Then you
need to be tough in challenging assumptions and reporting your findings
and recommendations.&lt;/p&gt;
&lt;p&gt;What you and your team discover, how you solve the problem, and the
way you communicate it up the chain will have a huge impact on your team's
visibility and credibility. Never waste the opportunity.&lt;/p&gt;
&lt;p&gt;Managing engineering failures that get escalated to senior leadership
is a real challenge, and I'll review personal stories of failure and
success in future posts.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
</description><category>maintenance</category><category>opportunity</category><category>resources</category><guid>https://fixitinfirmware.com/posts/mission-statements/</guid><pubDate>Thu, 01 Jul 2021 17:00:00 GMT</pubDate></item><item><title>Welcome to Maintenance</title><link>https://fixitinfirmware.com/posts/welcome-to-maintenance/</link><dc:creator>Ralph Hempel</dc:creator><description>&lt;p&gt;Great news - the company you work for is doing relatively well considering the
global pandemic of 2020-2021 and you still have a job. Your team has made a
final release of your flagship product and the engineers are being assigned to
new projects. Just before the monthly all-hands, your manager schedules a 1:1
where he tells you that you are now going to be on the maintenance crew for the
project that your team has released.&lt;/p&gt;
&lt;p&gt;Maintenance, sustaining, support - no matter what the word is, this is not
where you thought you would end up. Fixing bugs and adding features that were
dropped to meet the schedule is no fun and a dead-end.&lt;/p&gt;
&lt;p&gt;Or is it?&lt;/p&gt;
&lt;p&gt;In my experience the maintenance team performs a vital business function, and
it's a great time to really lean in and develop some of the skills that will
make you a much better embedded systems programmer. This is also an opportunity
to help your leadership team get a better idea of what is needed to support a
high-performing firmware maintenance team.&lt;/p&gt;
&lt;p&gt;If the company you work for doesn't have a great culture around maintenance
after product launch in place, don't worry. You will have to do some extra
work to drive organizational change, but patience and solid data to back up
your ideas can kick-start the change journey.&lt;/p&gt;
&lt;section id="first-steps"&gt;
&lt;h2&gt;First Steps&lt;/h2&gt;
&lt;p&gt;In your new role on the maintenance team it's important to take stock of
the expectations on your team and the resources you have available.&lt;/p&gt;
&lt;p&gt;When we talk about resources in a traditional project management
context, the first thing that comes to a PM's mind is budget, developers,
and and equipment.&lt;/p&gt;
&lt;p&gt;Before we go too far down this path, I'd like to ask you to deliberately
leave developers out of the resources category. The reason is simple - if
you need a bigger hard drive, you buy it. If you need more desks you can
move them from another department. Those are resources - people are not
resources. Please encourage your company to avoid calling developers
resources because it implies a 1:1 trade capability. We already know
that no two developers have the same capability or capacity, so let's
stop using the word resource for staff.&lt;/p&gt;
&lt;p&gt;I'll suggest here that resources may also include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Product requirements (including features that are not yet implemented)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Technical and user documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test plans and automated test systems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source code, CI/CD pipelines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any specially modified PCBAs or programming fixtures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any artifacts that the team needs to build and support your product is a
resource, so identify and conserve them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="technical-debt"&gt;
&lt;h2&gt;Technical Debt&lt;/h2&gt;
&lt;p&gt;Wait, you don't have some of these items, or they are at best incomplete and
outdated? Welcome to the reality of technical debt. Some projects have the
misfortune to run long enough that they get bogged down in technical debt and
end up cancelled. Other projects have a short enough run that the developers do
only what is absolutely needed to get the job done, and corners will be cut -
most likely in documentation.&lt;/p&gt;
&lt;p&gt;Now is the time to meet with the development team (that you may have even
been a part of) and gather any artifacts that they still have. If
you're lucky there's a decent bug/feature list in a tool like JIRA and some
form of Wiki or Confluence site for the documentation.&lt;/p&gt;
&lt;p&gt;Expect to spend at least a week or two getting these resources into useable
shape together with the rest of your team - and avoid falling into the trap
of doing any more actual coding until you are satisfied that you and the team
are prepared to look after the code properly.&lt;/p&gt;
&lt;p&gt;In the next installment we'll talk about building a culture of quality
and accountability.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;Maintenance, sustaining, support - no matter what the word is, this is not
where you thought you would end up. Fixing bugs and adding features that were
dropped to meet the schedule is no fun and a dead-end.&lt;/p&gt;
&lt;p&gt;Or is it?&lt;/p&gt;
&lt;p&gt;In my experience the maintenance team performs a vital business function, and
it's a great time to really lean in and develop some of the skills that will
make you a much better embedded systems programmer. This is also an opportunity
to help your leadership team get a better idea of what is needed to support a
high-performing firmware maintenance team.&lt;/p&gt;
&lt;p&gt;If the company you work for doesn't have a great culture around maintenance
after product launch in place, don't worry. You will have to do some extra
work to drive organizational change, but patience and solid data to back up
your ideas can kick-start the change journey.&lt;/p&gt;
&lt;section id="first-steps"&gt;
&lt;h2&gt;First Steps&lt;/h2&gt;
&lt;p&gt;In your new role on the maintenance team it's important to take stock of
the expectations on your team and the resources you have available.&lt;/p&gt;
&lt;p&gt;When we talk about resources in a traditional project management
context, the first thing that comes to a PM's mind is budget, developers,
and and equipment.&lt;/p&gt;
&lt;p&gt;Before we go too far down this path, I'd like to ask you to deliberately
leave developers out of the resources category. The reason is simple - if
you need a bigger hard drive, you buy it. If you need more desks you can
move them from another department. Those are resources - people are not
resources. Please encourage your company to avoid calling developers
resources because it implies a 1:1 trade capability. We already know
that no two developers have the same capability or capacity, so let's
stop using the word resource for staff.&lt;/p&gt;
&lt;p&gt;I'll suggest here that resources may also include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Product requirements (including features that are not yet implemented)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Technical and user documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test plans and automated test systems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source code, CI/CD pipelines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any specially modified PCBAs or programming fixtures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any artifacts that the team needs to build and support your product is a
resource, so identify and conserve them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="technical-debt"&gt;
&lt;h2&gt;Technical Debt&lt;/h2&gt;
&lt;p&gt;Wait, you don't have some of these items, or they are at best incomplete and
outdated? Welcome to the reality of technical debt. Some projects have the
misfortune to run long enough that they get bogged down in technical debt and
end up cancelled. Other projects have a short enough run that the developers do
only what is absolutely needed to get the job done, and corners will be cut -
most likely in documentation.&lt;/p&gt;
&lt;p&gt;Now is the time to meet with the development team (that you may have even
been a part of) and gather any artifacts that they still have. If
you're lucky there's a decent bug/feature list in a tool like JIRA and some
form of Wiki or Confluence site for the documentation.&lt;/p&gt;
&lt;p&gt;Expect to spend at least a week or two getting these resources into useable
shape together with the rest of your team - and avoid falling into the trap
of doing any more actual coding until you are satisfied that you and the team
are prepared to look after the code properly.&lt;/p&gt;
&lt;p&gt;In the next installment we'll talk about building a culture of quality
and accountability.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;Or is it?&lt;/p&gt;
&lt;p&gt;In my experience the maintenance team performs a vital business function, and
it's a great time to really lean in and develop some of the skills that will
make you a much better embedded systems programmer. This is also an opportunity
to help your leadership team get a better idea of what is needed to support a
high-performing firmware maintenance team.&lt;/p&gt;
&lt;p&gt;If the company you work for doesn't have a great culture around maintenance
after product launch in place, don't worry. You will have to do some extra
work to drive organizational change, but patience and solid data to back up
your ideas can kick-start the change journey.&lt;/p&gt;
&lt;section id="first-steps"&gt;
&lt;h2&gt;First Steps&lt;/h2&gt;
&lt;p&gt;In your new role on the maintenance team it's important to take stock of
the expectations on your team and the resources you have available.&lt;/p&gt;
&lt;p&gt;When we talk about resources in a traditional project management
context, the first thing that comes to a PM's mind is budget, developers,
and and equipment.&lt;/p&gt;
&lt;p&gt;Before we go too far down this path, I'd like to ask you to deliberately
leave developers out of the resources category. The reason is simple - if
you need a bigger hard drive, you buy it. If you need more desks you can
move them from another department. Those are resources - people are not
resources. Please encourage your company to avoid calling developers
resources because it implies a 1:1 trade capability. We already know
that no two developers have the same capability or capacity, so let's
stop using the word resource for staff.&lt;/p&gt;
&lt;p&gt;I'll suggest here that resources may also include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Product requirements (including features that are not yet implemented)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Technical and user documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test plans and automated test systems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source code, CI/CD pipelines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any specially modified PCBAs or programming fixtures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any artifacts that the team needs to build and support your product is a
resource, so identify and conserve them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="technical-debt"&gt;
&lt;h2&gt;Technical Debt&lt;/h2&gt;
&lt;p&gt;Wait, you don't have some of these items, or they are at best incomplete and
outdated? Welcome to the reality of technical debt. Some projects have the
misfortune to run long enough that they get bogged down in technical debt and
end up cancelled. Other projects have a short enough run that the developers do
only what is absolutely needed to get the job done, and corners will be cut -
most likely in documentation.&lt;/p&gt;
&lt;p&gt;Now is the time to meet with the development team (that you may have even
been a part of) and gather any artifacts that they still have. If
you're lucky there's a decent bug/feature list in a tool like JIRA and some
form of Wiki or Confluence site for the documentation.&lt;/p&gt;
&lt;p&gt;Expect to spend at least a week or two getting these resources into useable
shape together with the rest of your team - and avoid falling into the trap
of doing any more actual coding until you are satisfied that you and the team
are prepared to look after the code properly.&lt;/p&gt;
&lt;p&gt;In the next installment we'll talk about building a culture of quality
and accountability.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;In my experience the maintenance team performs a vital business function, and
it's a great time to really lean in and develop some of the skills that will
make you a much better embedded systems programmer. This is also an opportunity
to help your leadership team get a better idea of what is needed to support a
high-performing firmware maintenance team.&lt;/p&gt;
&lt;p&gt;If the company you work for doesn't have a great culture around maintenance
after product launch in place, don't worry. You will have to do some extra
work to drive organizational change, but patience and solid data to back up
your ideas can kick-start the change journey.&lt;/p&gt;
&lt;section id="first-steps"&gt;
&lt;h2&gt;First Steps&lt;/h2&gt;
&lt;p&gt;In your new role on the maintenance team it's important to take stock of
the expectations on your team and the resources you have available.&lt;/p&gt;
&lt;p&gt;When we talk about resources in a traditional project management
context, the first thing that comes to a PM's mind is budget, developers,
and and equipment.&lt;/p&gt;
&lt;p&gt;Before we go too far down this path, I'd like to ask you to deliberately
leave developers out of the resources category. The reason is simple - if
you need a bigger hard drive, you buy it. If you need more desks you can
move them from another department. Those are resources - people are not
resources. Please encourage your company to avoid calling developers
resources because it implies a 1:1 trade capability. We already know
that no two developers have the same capability or capacity, so let's
stop using the word resource for staff.&lt;/p&gt;
&lt;p&gt;I'll suggest here that resources may also include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Product requirements (including features that are not yet implemented)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Technical and user documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test plans and automated test systems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source code, CI/CD pipelines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any specially modified PCBAs or programming fixtures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any artifacts that the team needs to build and support your product is a
resource, so identify and conserve them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="technical-debt"&gt;
&lt;h2&gt;Technical Debt&lt;/h2&gt;
&lt;p&gt;Wait, you don't have some of these items, or they are at best incomplete and
outdated? Welcome to the reality of technical debt. Some projects have the
misfortune to run long enough that they get bogged down in technical debt and
end up cancelled. Other projects have a short enough run that the developers do
only what is absolutely needed to get the job done, and corners will be cut -
most likely in documentation.&lt;/p&gt;
&lt;p&gt;Now is the time to meet with the development team (that you may have even
been a part of) and gather any artifacts that they still have. If
you're lucky there's a decent bug/feature list in a tool like JIRA and some
form of Wiki or Confluence site for the documentation.&lt;/p&gt;
&lt;p&gt;Expect to spend at least a week or two getting these resources into useable
shape together with the rest of your team - and avoid falling into the trap
of doing any more actual coding until you are satisfied that you and the team
are prepared to look after the code properly.&lt;/p&gt;
&lt;p&gt;In the next installment we'll talk about building a culture of quality
and accountability.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;p&gt;If the company you work for doesn't have a great culture around maintenance
after product launch in place, don't worry. You will have to do some extra
work to drive organizational change, but patience and solid data to back up
your ideas can kick-start the change journey.&lt;/p&gt;
&lt;section id="first-steps"&gt;
&lt;h2&gt;First Steps&lt;/h2&gt;
&lt;p&gt;In your new role on the maintenance team it's important to take stock of
the expectations on your team and the resources you have available.&lt;/p&gt;
&lt;p&gt;When we talk about resources in a traditional project management
context, the first thing that comes to a PM's mind is budget, developers,
and and equipment.&lt;/p&gt;
&lt;p&gt;Before we go too far down this path, I'd like to ask you to deliberately
leave developers out of the resources category. The reason is simple - if
you need a bigger hard drive, you buy it. If you need more desks you can
move them from another department. Those are resources - people are not
resources. Please encourage your company to avoid calling developers
resources because it implies a 1:1 trade capability. We already know
that no two developers have the same capability or capacity, so let's
stop using the word resource for staff.&lt;/p&gt;
&lt;p&gt;I'll suggest here that resources may also include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Product requirements (including features that are not yet implemented)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Technical and user documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test plans and automated test systems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source code, CI/CD pipelines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any specially modified PCBAs or programming fixtures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any artifacts that the team needs to build and support your product is a
resource, so identify and conserve them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="technical-debt"&gt;
&lt;h2&gt;Technical Debt&lt;/h2&gt;
&lt;p&gt;Wait, you don't have some of these items, or they are at best incomplete and
outdated? Welcome to the reality of technical debt. Some projects have the
misfortune to run long enough that they get bogged down in technical debt and
end up cancelled. Other projects have a short enough run that the developers do
only what is absolutely needed to get the job done, and corners will be cut -
most likely in documentation.&lt;/p&gt;
&lt;p&gt;Now is the time to meet with the development team (that you may have even
been a part of) and gather any artifacts that they still have. If
you're lucky there's a decent bug/feature list in a tool like JIRA and some
form of Wiki or Confluence site for the documentation.&lt;/p&gt;
&lt;p&gt;Expect to spend at least a week or two getting these resources into useable
shape together with the rest of your team - and avoid falling into the trap
of doing any more actual coding until you are satisfied that you and the team
are prepared to look after the code properly.&lt;/p&gt;
&lt;p&gt;In the next installment we'll talk about building a culture of quality
and accountability.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;section id="first-steps"&gt;
&lt;h2&gt;First Steps&lt;/h2&gt;
&lt;p&gt;In your new role on the maintenance team it's important to take stock of
the expectations on your team and the resources you have available.&lt;/p&gt;
&lt;p&gt;When we talk about resources in a traditional project management
context, the first thing that comes to a PM's mind is budget, developers,
and and equipment.&lt;/p&gt;
&lt;p&gt;Before we go too far down this path, I'd like to ask you to deliberately
leave developers out of the resources category. The reason is simple - if
you need a bigger hard drive, you buy it. If you need more desks you can
move them from another department. Those are resources - people are not
resources. Please encourage your company to avoid calling developers
resources because it implies a 1:1 trade capability. We already know
that no two developers have the same capability or capacity, so let's
stop using the word resource for staff.&lt;/p&gt;
&lt;p&gt;I'll suggest here that resources may also include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Product requirements (including features that are not yet implemented)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Technical and user documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test plans and automated test systems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source code, CI/CD pipelines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any specially modified PCBAs or programming fixtures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any artifacts that the team needs to build and support your product is a
resource, so identify and conserve them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="technical-debt"&gt;
&lt;h2&gt;Technical Debt&lt;/h2&gt;
&lt;p&gt;Wait, you don't have some of these items, or they are at best incomplete and
outdated? Welcome to the reality of technical debt. Some projects have the
misfortune to run long enough that they get bogged down in technical debt and
end up cancelled. Other projects have a short enough run that the developers do
only what is absolutely needed to get the job done, and corners will be cut -
most likely in documentation.&lt;/p&gt;
&lt;p&gt;Now is the time to meet with the development team (that you may have even
been a part of) and gather any artifacts that they still have. If
you're lucky there's a decent bug/feature list in a tool like JIRA and some
form of Wiki or Confluence site for the documentation.&lt;/p&gt;
&lt;p&gt;Expect to spend at least a week or two getting these resources into useable
shape together with the rest of your team - and avoid falling into the trap
of doing any more actual coding until you are satisfied that you and the team
are prepared to look after the code properly.&lt;/p&gt;
&lt;p&gt;In the next installment we'll talk about building a culture of quality
and accountability.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;

&lt;section id="technical-debt"&gt;
&lt;h2&gt;Technical Debt&lt;/h2&gt;
&lt;p&gt;Wait, you don't have some of these items, or they are at best incomplete and
outdated? Welcome to the reality of technical debt. Some projects have the
misfortune to run long enough that they get bogged down in technical debt and
end up cancelled. Other projects have a short enough run that the developers do
only what is absolutely needed to get the job done, and corners will be cut -
most likely in documentation.&lt;/p&gt;
&lt;p&gt;Now is the time to meet with the development team (that you may have even
been a part of) and gather any artifacts that they still have. If
you're lucky there's a decent bug/feature list in a tool like JIRA and some
form of Wiki or Confluence site for the documentation.&lt;/p&gt;
&lt;p&gt;Expect to spend at least a week or two getting these resources into useable
shape together with the rest of your team - and avoid falling into the trap
of doing any more actual coding until you are satisfied that you and the team
are prepared to look after the code properly.&lt;/p&gt;
&lt;p&gt;In the next installment we'll talk about building a culture of quality
and accountability.&lt;/p&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
</description><category>maintenance</category><category>opportunity</category><category>resources</category><guid>https://fixitinfirmware.com/posts/welcome-to-maintenance/</guid><pubDate>Tue, 05 Jan 2021 17:00:00 GMT</pubDate></item></channel></rss>